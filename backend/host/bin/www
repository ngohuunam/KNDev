#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config({ path: `../../env/development.env` })
require('module-alias/register')
const app = require('@host')
const { logger, socket } = require('@shared')
// const debug = require('debug')('kn-sv-0001:server')
const http = require('http')
const https = require('https')
const { readFileSync } = require('fs')

const isHttps = true
const httpPort = '3000'
const httpsPort = '3003'

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || isHttps ? httpsPort : httpPort)
app.set('port', port)

/**
 * Create HTTP server.
 */

// const server = http.createServer(app)

// Server configurations
const key = 'host/cert/localhost+2-key.pem'
const cert = 'host/cert/localhost+2.pem'

const options = {
  key: readFileSync(key),
  cert: readFileSync(cert),
  requestCert: false,
  rejectUnauthorized: false,
}
const server = isHttps ? https.createServer(options, app) : http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Init socket.io instance.
 */

socket.io.attach(server)
setTimeout(() => socket.io.sockets.emit('reload'), 2000)

/**
 * Init ws instance.
 */

// ews.init(server)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges', error)
      process.exit(1)
      break
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use', error)
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  logger.info('Listening on ' + bind)
}
